from flask import Flask, request, jsonify, send_file
from flask_cors import CORS  
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import subprocess
import sys
import os
import torch
import torchvision.transforms as transforms
from PIL import Image
import torchvision.models as models
import torch.nn as nn
import torch.nn.functional as F
import io
import datetime
import jwt
from functools import wraps
import bcrypt
from database import init_db, get_user
import sqlite3
from werkzeug.security import generate_password_hash


app = Flask(__name__)
CORS(app)

app.config['SECRET_KEY'] = 'your_secret_key'
DATABASE = "users.db"


app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)


# -------------------- Database Model -------------------- #
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=False)
    plain_password = db.Column(db.String(128), nullable=True)  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    role = db.Column(db.String(20), nullable=False)

# -------------------- Database Functions -------------------- #
def get_db_connection():
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• """
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def get_user(username):
    """ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• """
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = cursor.fetchone()
    conn.close()
    return user

def init_db():
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ """
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            plain_password TEXT,  -- ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ
            role TEXT NOT NULL
        )
    """)
    conn.commit()
    conn.close()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 'Dev' ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ?", ("Dev",))
    if not cursor.fetchone():
        hashed_password = bcrypt.hashpw("10110".encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        cursor.execute("INSERT INTO users (username, password, plain_password,role) VALUES (?, ?, ?, ?)",
                       ("Dev", hashed_password, 10110 ,"Dev"))
        conn.commit()
    conn.close()

def hash_passwords():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    cursor.execute("SELECT username, password FROM users")
    users = cursor.fetchall()

    for username, password in users:
        if isinstance(password, int) or not password.startswith("$2b$"):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            password = str(password)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            hashed_password = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
            cursor.execute("UPDATE users SET password = ? WHERE username = ?", (hashed_password, username))
            print(f"Updated {username}'s password to bcrypt")

    conn.commit()
    conn.close()

# -------------------- Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token -------------------- #
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')

        if token and token.startswith("Bearer "):
            token = token.split(" ")[1]  # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ token ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

        if not token:
            print("‚õî No token provided")
            print("üîç Request Headers:", request.headers)  # Debug headers
            return jsonify({'error': 'Token is missing!'}), 403
        
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
            current_user = get_user(data['username'])

            if not current_user:
                print("‚õî User not found")
                return jsonify({'error': 'User not found!'}), 403
            
            current_user = dict(current_user)
            print(f"üîç Token Verified: {current_user}")

        except jwt.ExpiredSignatureError:
            print("‚õî Token expired")
            return jsonify({'error': 'Token has expired!'}), 403
        except jwt.InvalidTokenError:
            print("‚õî Invalid token")
            return jsonify({'error': 'Token is invalid!'}), 403

        return f(current_user, *args, **kwargs)

    return decorated
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')

        if token and token.startswith("Bearer "):
            token = token.split(" ")[1]  # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ token ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

        if not token:
            print("‚õî No token provided")
            print("üîç Request Headers:", request.headers)  # Debug headers
            return jsonify({'error': 'Token is missing!'}), 403
        
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
            current_user = get_user(data['username'])

            if not current_user:
                print("‚õî User not found")
                return jsonify({'error': 'User not found!'}), 403
            
            current_user = dict(current_user)
            print(f"üîç Token Verified: {current_user}")

        except jwt.ExpiredSignatureError:
            print("‚õî Token expired")
            return jsonify({'error': 'Token has expired!'}), 403
        except jwt.InvalidTokenError:
            print("‚õî Invalid token")
            return jsonify({'error': 'Token is invalid!'}), 403

        return f(current_user, *args, **kwargs)

    return decorated

# -------------------- API Register -------------------- #
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get("username")
    password = data.get("password")  # ‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
    role = data.get("role")

    if not username or not password or not role:
        return jsonify({"error": "Missing required fields"}), 400

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    existing_user = cursor.fetchone()

    if existing_user:
        conn.close()
        return jsonify({"error": "Username already exists"}), 400

    # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö plain_password ‡πÅ‡∏•‡∏∞ password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    cursor.execute("""
        INSERT INTO users (username, password, plain_password, role) 
        VALUES (?, ?, ?, ?)
    """, (username, hashed_password, password, role))
    
    conn.commit()
    conn.close()
    return jsonify({"message": "User registered successfully"}), 201


# -------------------- API Login -------------------- #
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')

    user = get_user(username)
    if not user:
        return jsonify({'error': 'Invalid credentials'}), 401

    print(f"Stored password in DB: {user['password']}")  # ‚úÖ Debug ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
    if bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
        token = jwt.encode({'username': username, 'exp': datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=1)},
                   app.config['SECRET_KEY'], algorithm="HS256")

        return jsonify({'token': token.decode('utf-8'), 'role': user['role']})
    else:
        return jsonify({'error': 'Invalid credentials'}), 401

# API Protected Route
@app.route('/protected', methods=['GET'])
@token_required
def protected_route(current_user):
    return jsonify({'message': 'This is a protected route', 'user': current_user})

# -------------------- API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ -------------------- #
@app.route('/users', methods=['GET'])
def get_users():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, password, plain_password, role FROM users")
    users = cursor.fetchall()
    conn.close()

    return jsonify([dict(user) for user in users])  # ‚úÖ ‡∏™‡πà‡∏á plain_password ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢

# -------------------- API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ -------------------- #
@app.route('/update-user', methods=['POST'])
def update_user():
    """ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user """
    data = request.json
    user_id = data.get("id")
    new_username = data.get("username")
    new_password = data.get("password")
    new_role = data.get("role")

    if not user_id or not new_username or not new_password or not new_role:
        return jsonify({"error": "Missing required fields"}), 400

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

        cursor.execute("""
            UPDATE users 
            SET username = ?, password = ?, plain_password = ?, role = ? 
            WHERE id = ?
        """, (new_username, hashed_password, new_password, new_role, user_id))

        conn.commit()
        conn.close()
        return jsonify({"message": "User updated successfully"})
    except sqlite3.IntegrityError:
        conn.close()
        return jsonify({"error": "Username already exists"}), 400
    


#-----------------------------DELETE------------------------------------------

@app.route('/delete-user/<int:user_id>', methods=['DELETE'])
@token_required
def delete_user(current_user, user_id):
    """ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• """
    print(f"üîç Current User: {current_user}")
    print(f"üîç Current Role: {current_user['role']}")
    
    if current_user['role'] not in ['Dev', 'Admin']:
        print("‚õî Unauthorized access")
        return jsonify({"error": "Unauthorized access"}), 403

    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user_to_delete = cursor.fetchone()
    
    if not user_to_delete:
        conn.close()
        return jsonify({"error": "User not found"}), 404

    try:
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        cursor.close()  # ‚úÖ ‡∏õ‡∏¥‡∏î Cursor ‡∏Å‡πà‡∏≠‡∏ô Commit
        conn.commit()
        conn.close()
        print("‚úÖ User deleted successfully")
        return jsonify({"message": "User deleted successfully"}), 200
    except Exception as e:
        conn.close()
        print(f"‚ùå Failed to delete user: {str(e)}")
        return jsonify({"error": f"Failed to delete user: {str(e)}"}), 500

    
# ---------------------------- RPA Part
@app.route('/run_rpa', methods=['POST'])
def run_rpa():
    try:
        data = request.json
        row = str(data.get("row", "")).strip()
        column = str(data.get("column", "")).strip()
        month1 = str(data.get("month1", "")).strip()
        year1 = str(data.get("year1", "")).strip()
        periodday = str(data.get("periodday", "")).strip()
        mode = str(data.get("mode", "")).strip()

        if mode == "st":
            if not all([row, column, month1, year1, periodday]):
                return jsonify({"error": "‚ùå Missing parameters"}), 400

            print(f"üìå Running RPA with params: {row}, {column}, {month1}, {year1}, {periodday}")

            if os.name == "nt":  # Windows
                subprocess.Popen(
                    [sys.executable, "rpa_pullperiodst.py", row, column, month1, year1, periodday],
                    creationflags=subprocess.CREATE_NEW_CONSOLE  # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            )

            return jsonify({"message": "‚úÖ RPA started successfully"}), 200
        
        elif mode == "ld":
            if not all([row, column, month1, year1, periodday]):
                return jsonify({"error": "‚ùå Missing parameters"}), 400

            print(f"üìå Running RPA with params: {row}, {column}, {month1}, {year1}, {periodday}")

            if os.name == "nt":  # Windows
                subprocess.Popen(
                    [sys.executable, "rpa_pullperiodld.py", row, column, month1, year1, periodday],
                    creationflags=subprocess.CREATE_NEW_CONSOLE  # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            )

            return jsonify({"message": "‚úÖ RPA started successfully"}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500
    
class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.layer = nn.Linear(512, 10)  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•

    def forward(self, x):
        return self.layer(x)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß
model = models.resnet50()  
num_ftrs = model.fc.in_features  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô input features ‡∏Ç‡∏≠‡∏á Fully Connected layer
model.fc = nn.Linear(num_ftrs, 3)  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô output ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô

# ‡πÇ‡∏´‡∏•‡∏î state_dict ‡∏à‡∏≤‡∏Å checkpoint
checkpoint = torch.load("resnet50_checkpoint_0.pth", map_location=torch.device('cpu'))
model.load_state_dict(checkpoint["model_state_dict"])  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ model_state_dict

model.eval()  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö

transform = transforms.Compose([
    transforms.Resize((224, 224)),  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ
    transforms.ToTensor(),
])

@app.route('/predict', methods=['POST'])
def getdateshow():
    global datestart
    global datestop
    global periodday
    global mode

    data = request.json
    datestart = str(data.get("datestart", "")).strip()
    datestop = str(data.get("datestop", "")).strip()
    periodday = str(data.get("periodday", "")).strip()
    mode = str(data.get("mode", "")).strip()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    try:
        start_date = datetime.datetime.strptime(datestart, "%Y-%m-%d").date()
        end_date = datetime.datetime.strptime(datestop, "%Y-%m-%d").date()
    except ValueError:
        return jsonify({"error": "Invalid date format"}), 400

    # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    image_dir = "C:/Users/Ratti/Documents/IceCreamDetection/StandingContract/IMAGE_file"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    image_paths = load_images_by_date(image_dir, start_date, end_date)

    return jsonify({
        "message": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
        "datestart": datestart,
        "datestop": datestop,
        "periodday": periodday,
        "mode": mode,
        "images": image_paths
    })

def load_images_by_date(root_dir, start_date, end_date):
    image_paths = []
    for folder in sorted(os.listdir(root_dir)):
        folder_path = os.path.join(root_dir, folder)
        try:
            folder_date = datetime.datetime.strptime(folder, "%Y-%m-%d").date()
        except ValueError:
            continue

        if start_date <= folder_date <= end_date:
            for file in os.listdir(folder_path):
                if file.lower().endswith((".png", ".jpg", ".jpeg")):
                    image_paths.append(os.path.join(folder, file))

    return image_paths

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files['file']
    img = Image.open(file).convert('RGB')
    img = transform(img)
    img = img.unsqueeze(0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    with torch.no_grad():
        output = model(img)
        prediction = output.argmax(dim=1).item()  # ‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

    return jsonify({"prediction": prediction})

@app.route('/classify', methods=['POST'])
def classify_image():
    if 'file' not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files['file']
    img = Image.open(file).convert('RGB')
    img = transform(img).unsqueeze(0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏¥‡∏ï‡∏¥ batch

    with torch.no_grad():
        output = model(img)
        prediction = output.argmax(dim=1).item()

    return jsonify({"prediction": prediction})

# üî• ‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
# hash_passwords()

if __name__ == '__main__':
    CORS(app)
    init_db() 
    hash_passwords()
    app.run(debug=True, port=5000)  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô Flask